{"version":3,"sources":["webpack:///./src/app/components/password-match-input/password-match-input.component.html","webpack:///./src/app/pages/reset-password/reset-password.component.html","webpack:///./src/app/components/password-match-input/password-match-input.component.scss","webpack:///./src/app/components/password-match-input/password-match-input.component.ts","webpack:///./src/app/components/password-match-input/password-match-input.module.ts","webpack:///./src/app/pages/reset-password/reset-password.component.scss","webpack:///./src/app/pages/reset-password/reset-password.component.ts","webpack:///./src/app/pages/reset-password/reset-password.module.ts"],"names":[],"mappings":"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","file":"pages-reset-password-reset-password-module.3ccae2446dca93eb490a.js","sourcesContent":["module.exports = \"<div class=\\\"\\\" [formGroup]=\\\"form\\\">\\n    <ng-container *ngIf=\\\"form.get('password'); let password\\\">\\n        <app-ji-input \\n            [parentForm]=\\\"form\\\" \\n            [type]=\\\"'password'\\\"\\n            [input]=\\\"'password'\\\" \\n            [title]=\\\"'New password'\\\"\\n            [placeholder]=\\\"'Add your new password'\\\" \\n            [errors]=\\\"password.errors\\\"\\n            [hasError]=\\\"password.invalid && (password.dirty || password.touched)\\\"></app-ji-input>\\n    </ng-container>\\n    <ng-container *ngIf=\\\"form.get('confirmPassword'); let confirmPassword\\\">\\n        <app-ji-input \\n            [parentForm]=\\\"form\\\" \\n            [type]=\\\"'password'\\\"\\n            [input]=\\\"'confirmPassword'\\\" \\n            [title]=\\\"'Confirm new password'\\\"\\n            [placeholder]=\\\"'Re-enter your new password'\\\" \\n            [errors]=\\\"confirmPassword.errors\\\"\\n            [hasError]=\\\"confirmPassword.invalid \\n                && (\\n                    confirmPassword.dirty \\n                    || confirmPassword.touched\\n                )\\\"></app-ji-input>\\n    </ng-container>\\n</div>\"","module.exports = \"<app-form-header \\n    [title]=\\\"'Reset Password'\\\"\\n    [backTo]=\\\"['/', routeNames.login]\\\"></app-form-header>    \\n    \\n<div class=\\\"wrapper\\\">\\n    <section>\\n        <app-errors [errors]=\\\"this.errors\\\"></app-errors>\\n        <form [formGroup]=\\\"resetPasswordForm\\\" class=\\\"form-one m-b-40\\\">\\n    \\n            <app-password-match-input formControlName=\\\"password\\\"></app-password-match-input>\\n    \\n            <div class=\\\"m-t-40\\\">\\n                <button \\n                    mat-ripple \\n                    type=\\\"button\\\" \\n                    class=\\\"btn btn-large btn-rounded bg-20 width-100\\\"\\n                    [disabled]=\\\"resetPasswordForm.invalid\\\" \\n                    (click)=\\\"handleSubmit()\\\">\\n                    Reset\\n                </button>\\n            </div>\\n        </form>\\n    </section>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGFzc3dvcmQtbWF0Y2gtaW5wdXQvcGFzc3dvcmQtbWF0Y2gtaW5wdXQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, forwardRef, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR,\n    FormGroup,\n    FormControl,\n    Validators,\n    AbstractControl\n} from '@angular/forms';\nimport { Store, select } from '@ngrx/store';\nimport { IAppState } from '@src/app/store/app.reducers';\nimport { filter } from 'rxjs/operators';\nimport { RequestStatus } from '@src/app/services/api.service.interface';\nimport { selectUserStatus } from '@src/app/store/modules/user/user.selectors';\nimport { Subscription } from 'rxjs';\n\n\nconst lower = /[a-z]/;\nconst upper = /[A-Z]/;\nconst numbers = /[0-9]/;\n\n\nconst CUSTOM_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => PasswordMatchInputComponent),\n    multi: true,\n};\n\n@Component({\n    selector: 'app-password-match-input',\n    providers: [CUSTOM_VALUE_ACCESSOR],\n    templateUrl: './password-match-input.component.html',\n    styleUrls: ['./password-match-input.component.scss']\n})\nexport class PasswordMatchInputComponent implements ControlValueAccessor, OnInit, OnDestroy {\n    @Output() passwordFormValid = new EventEmitter<boolean>();\n    private level: string;\n    public disabled: boolean;\n    private onChange: Function;\n    private onTouched: Function;\n\n    public subscriptions: Subscription[] = [];\n    public status$ = this.store.pipe(\n        select(selectUserStatus),\n        filter(status => Boolean(status) && status === RequestStatus.success)\n    );\n\n    password = new FormControl('', [\n        // Validators.required,\n        Validators.minLength(8)\n        // control => this.passwordValidator(control)\n    ]);\n    confirmPassword = new FormControl('', [\n        // Validators.required,\n        control => this.matchValidator(control)\n    ]);\n\n    public form = new FormGroup({\n        password: this.password,\n        confirmPassword: this.confirmPassword\n    });\n\n    constructor(\n        private store: Store<IAppState>\n    ) {\n        this.onChange = (_: any) => { };\n        this.onTouched = () => { };\n        this.disabled = false;\n\n        this.form.valueChanges.subscribe(\n            _ => this.checkValue()\n        );\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(\n            this.status$.subscribe(status => {\n            })\n        );\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    public isActive(value: string): boolean {\n        return value === this.level;\n    }\n\n\n    public checkValue() {\n        // if the passwords are valid, update the control value to match the password value (if form is valid both passwords must match)\n        if (this.form.valid) {\n            this.onChange(this.password.value);\n        } else {\n            this.onChange(null);\n        }\n\n        const isPasswordFormValid = Boolean(this.password.value\n            && this.confirmPassword.value\n            && this.form.valid);\n        this.passwordFormValid.emit(isPasswordFormValid);\n\n        this.onTouched();\n    }\n\n    writeValue(value: any): void {\n        this.form.setValue({\n            password: value,\n            confirmPassword: value\n        });\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    matchValidator(control: AbstractControl) {\n        if (control.value && this.password.value !== control.value) {\n            return { mismatch: true };\n        }\n    }\n\n    passwordValidator(control: AbstractControl) {\n        if (control.value) {\n            const password = control.value;\n\n            if (password.length < 8) {\n                return { length: true };\n            }\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PasswordMatchInputComponent } from './password-match-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { JiFormsModule } from '../forms/ji-forms.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        JiFormsModule\n    ],\n    providers: [],\n    bootstrap: [],\n    declarations: [PasswordMatchInputComponent],\n    exports: [PasswordMatchInputComponent]\n})\nexport class PasswordMatchInputModule { }\n","module.exports = \"section {\\n  margin-top: 24px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9raHJlYnRvdi9Qcm9qZWN0cy9qb3VybmV5aW50by1mcm9udGVuZC9zcmMvYXBwL3BhZ2VzL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQWdCLEVBQUEiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9yZXNldC1wYXNzd29yZC9yZXNldC1wYXNzd29yZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbInNlY3Rpb24ge1xuICAgIG1hcmdpbi10b3A6IDI0cHg7XG59Il19 */\"","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { select, Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { IAppState } from '@src/app/store/app.reducers';\nimport { RequestStatus } from '@src/app/services/api.service.interface';\nimport { Location } from '@angular/common';\nimport {\n    selectForgottenPasswordStatus,\n    selectForgottenPasswordErrors\n} from '@src/app/store/modules/forgotten-password/forgotten-password.selectors';\nimport { ActivatedRoute } from '@angular/router';\nimport { ResetPasswordRequestAction } from '@src/app/store/modules/forgotten-password/forgotten-password.actions';\nimport { RouteNames } from '@src/app/route-names';\nimport { SpinnerOverlayService } from '@src/app/services';\n\n@Component({\n    selector: 'app-reset-password',\n    templateUrl: './reset-password.component.html',\n    styleUrls: ['reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n    // Store\n    public subscriptions: Subscription[] = [];\n    public status$: Observable<string> = this.store.pipe(select(selectForgottenPasswordStatus));\n    public errors$: Observable<any> = this.store.pipe(select(selectForgottenPasswordErrors));\n    public status: null | string = null;\n    public errors: null | string = null;\n\n    // Reactive form\n    public resetPasswordForm: FormGroup = this.fb.group({\n        password: ['', [Validators.required]]\n    });\n\n    // Request statuses\n    public requestStatus = RequestStatus;\n\n    public routeNames = RouteNames;\n\n    constructor(\n        private fb: FormBuilder,\n        private store: Store<IAppState>,\n        private location: Location,\n        private route: ActivatedRoute,\n        private spinner: SpinnerOverlayService\n    ) { }\n\n    ngOnInit(): void {\n        this.spinner.hide();\n        this.subscriptions.push(\n            this.status$.subscribe(status => {\n                this.status = status;\n            }),\n            this.errors$.subscribe(errors => {\n                this.errors = errors;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    handleSubmit() {\n        this.resetPasswordForm.markAllAsTouched();\n\n        if (this.resetPasswordForm.invalid) {\n            return;\n        }\n\n        const tokenUid = this.route.snapshot.paramMap.get('token');\n\n        const [token, uid] = tokenUid.split('XXXX');\n\n        if (!token || !uid) {\n            this.errors = 'This reset password url seems to be compromised. Please go back to your email and click on the link again.';\n            return;\n        }\n\n        const payload = {\n            uid,\n            token,\n            new_password1: this.resetPasswordForm.get('password').value,\n            new_password2: this.resetPasswordForm.get('password').value\n        };\n\n        this.store.dispatch(new ResetPasswordRequestAction(payload));\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { PasswordMatchInputModule } from '@src/app/components/password-match-input/password-match-input.module';\nimport { FormHeaderModule } from '@src/app/components/form-header/form-header.module';\nimport { ErrorsModule } from '@src/app/components/errors/errors.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule.forChild([\n            {\n                path: ':token',\n                component: ResetPasswordComponent,\n                data: {\n                    goBack: false\n                }\n            }\n        ]),\n        FormsModule,\n        ReactiveFormsModule,\n        MatButtonModule,\n        MatCheckboxModule,\n        MatRippleModule,\n        FlexLayoutModule,\n        PasswordMatchInputModule,\n        FormHeaderModule,\n        ErrorsModule\n    ],\n    providers: [],\n    bootstrap: [],\n    declarations: [ResetPasswordComponent]\n})\nexport class ResetPasswordModule { }\n"],"sourceRoot":""}