{"version":3,"sources":["webpack:///./src/app/pipes/excerpt.pipe.ts","webpack:///./src/app/pipes/getParsedTextWithHref.pipe.ts","webpack:///./src/app/pipes/minutes-seconds.pipe.ts","webpack:///./src/app/pipes/pipes.module.ts","webpack:///./src/app/pipes/replaceLineBreaks.pipe.ts","webpack:///./src/app/pipes/safe-html.pipe.ts","webpack:///./src/app/pipes/safe-video.pipe.ts"],"names":[],"mappings":"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","file":"default~pages-login-login-module~pages-onboarding-onboarding-module~pages-poses-poses-module~pages-r~5bd65dcf.c8bfc0997cedd2c07ab1.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'excerpt'\n})\nexport class ExcerptPipe implements PipeTransform {\n    transform(\n        text: string,\n        limit = 140,\n        preserveTags = true,\n        wordBreak = false,\n        suffix = '...',\n        moreLink = ''\n    ): string {\n\n        const arr = text.replace(/</g, '\\n<')\n            .replace(/>/g, '>\\n')\n            .replace(/\\n\\n/g, '\\n')\n            .replace(/^\\n/g, '')\n            .replace(/\\n$/g, '')\n            .split('\\n');\n\n        let sum = 0\n        let row;\n        let rowCut;\n        let cut;\n        let add;\n        let tagMatch;\n        let tagName;\n        let more = false;\n        const tagStack = [];\n\n        for (let i = 0; i < arr.length; i++) {\n\n            row = arr[i];\n            // count multiple spaces as one character\n            rowCut = row.replace(/[ ]+/g, ' ');\n\n            if (!row.length) {\n                continue;\n            }\n\n            if (row[0] !== '<') {\n\n                if (sum >= limit) {\n                    row = '';\n                } else if ((sum + rowCut.length) >= limit) {\n\n                    cut = limit - sum;\n\n                    if (row[cut - 1] === ' ') {\n                        while (cut) {\n                            cut -= 1;\n                            if (row[cut - 1] !== ' ') {\n                                break;\n                            }\n                        }\n                    } else {\n\n                        add = row.substring(cut).split('').indexOf(' ');\n\n                        // break on halh of word\n                        if (!wordBreak) {\n                            if (add !== -1) {\n                                cut += add;\n                            } else {\n                                cut = row.length;\n                            }\n                        }\n                    }\n\n                    row = row.substring(0, cut) + suffix;\n\n                    if (moreLink) {\n                        row += '<a href=\"' + moreLink + '\" style=\"display:inline\">Â»</a>';\n                    }\n\n                    sum = limit;\n                    more = true;\n                } else {\n                    sum += rowCut.length;\n                }\n            } else if (!preserveTags) {\n                row = '';\n            } else if (sum >= limit) {\n\n                tagMatch = row.match(/[a-zA-Z]+/);\n                tagName = tagMatch ? tagMatch[0] : '';\n\n                if (tagName) {\n                    if (row.substring(0, 2) !== '</') {\n\n                        tagStack.push(tagName);\n                        row = '';\n                    } else {\n\n                        while (tagStack[tagStack.length - 1] !== tagName && tagStack.length) {\n                            tagStack.pop();\n                        }\n\n                        if (tagStack.length) {\n                            row = '';\n                        }\n\n                        tagStack.pop();\n                    }\n                } else {\n                    row = '';\n                }\n            }\n\n            arr[i] = row;\n        }\n\n        return arr.join('\\n').replace(/\\n/g, '');\n    }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({ name: \"getParsedTextWithHref\" })\nexport class GetParsedTextWithHref implements PipeTransform {\n  transform(value: string): string {\n    if (!value) {\n      console.error(\"can not parse\", value);\n      return \"\";\n    }\n  \n    const pattern = /^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,3}(:[0-9]{1,5})?(\\/.*)?$/gm;\n\n    pattern.lastIndex = 0;\n    const regExpForSplit = /\\s/gm;\n    const brTagRegExp = /<br>*/gm;\n  \n    const parsedText = value\n      .replace(brTagRegExp, \" <br> \")\n      .split(regExpForSplit)\n      .map((word) => {\n        if (pattern.test(word)) {\n          return word.match(\"http\")\n            ? `<a target=\"blank\" href=\"${word}\">${word}</a>`\n            : `<a target=\"blank\" href=\"http://${word}\">${word}</a>`;\n        }\n  \n        return word;\n      })\n      .join(\" \");\n  \n    return parsedText;\n\n    // return value.replace(/(\\r\\n|\\n|\\r)/gm, \"<br>\");\n  }\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport * as moment from 'moment';\n\n@Pipe({\n  name: 'minuteSeconds'\n})\nexport class MinuteSecondsPipe implements PipeTransform {\n  transform(time: number): string {\n    return moment()\n      .set({ hour: 0, minute: 0, second: time, millisecond: 0 })\n      .format('HH:mm:ss');\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { MinuteSecondsPipe } from \"./minutes-seconds.pipe\";\nimport { SafeVideoPipe } from \"./safe-video.pipe\";\nimport { SafeHTMLPipe } from \"./safe-html.pipe\";\nimport { ExcerptPipe } from \"./excerpt.pipe\";\nimport { ReplaceLineBreaks } from \"./replaceLineBreaks.pipe\";\nimport { GetParsedTextWithHref } from \"./getParsedTextWithHref.pipe\";\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    MinuteSecondsPipe,\n    SafeVideoPipe,\n    SafeHTMLPipe,\n    ExcerptPipe,\n    ReplaceLineBreaks,\n    GetParsedTextWithHref,\n  ],\n  exports: [\n    MinuteSecondsPipe,\n    SafeVideoPipe,\n    SafeHTMLPipe,\n    ExcerptPipe,\n    ReplaceLineBreaks,\n    GetParsedTextWithHref\n  ],\n})\nexport class PipesModule {}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({ name: \"replaceLineBreaks\" })\nexport class ReplaceLineBreaks implements PipeTransform {\n  transform(value: string): string {\n    return value.replace(/(\\r\\n|\\n|\\r)/gm, \"<br>\");\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Pipe({ name: 'safeHTML' })\nexport class SafeHTMLPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) { }\n    transform(string) {\n        return this.sanitizer.bypassSecurityTrustHtml(string);\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer } from \"@angular/platform-browser\";\n\n@Pipe({ name: 'safeVideo' })\nexport class SafeVideoPipe implements PipeTransform {\n    constructor(private sanitizer: DomSanitizer) { }\n    transform(url) {\n        return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    }\n}"],"sourceRoot":""}